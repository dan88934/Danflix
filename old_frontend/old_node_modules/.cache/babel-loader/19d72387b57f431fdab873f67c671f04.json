{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"children\"],\n    _excluded3 = [\"children\"],\n    _excluded4 = [\"children\"],\n    _excluded5 = [\"children\"];\nimport React, { useState, useContext, createContext } from 'react';\nimport { Container, Title, Item, Inner, Header, Body } from './styles/accordion';\nvar ToggleContext = /*#__PURE__*/createContext();\nexport default function Accordion(_ref) {\n  var children = _ref.children,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(Container, restProps, /*#__PURE__*/React.createElement(Inner, null, children));\n} // State is for keeping track of changes on the page\n\nAccordion.Title = function AccordionTitle(_ref2) {\n  var children = _ref2.children,\n      restProps = _objectWithoutProperties(_ref2, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Title, restProps, children);\n};\n\nAccordion.Item = function AccordionItem(_ref3) {\n  var children = _ref3.children,\n      restProps = _objectWithoutProperties(_ref3, _excluded3);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      toggleShow = _useState2[0],\n      setToggleShow = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(ToggleContext.Provider, {\n    value: {\n      toggleShow: toggleShow,\n      setToggleShow: setToggleShow\n    }\n  }, /*#__PURE__*/React.createElement(Item, restProps, children), \";\");\n};\n\nAccordion.Header = function AccordionHeader(_ref4) {\n  var children = _ref4.children,\n      restProps = _objectWithoutProperties(_ref4, _excluded4);\n\n  //Passed into item\n  var _useContext = useContext(ToggleContext),\n      toggleShow = _useContext.toggleShow,\n      setToggleShow = _useContext.setToggleShow;\n\n  return /*#__PURE__*/React.createElement(Header, _extends({\n    onClick: function onClick() {\n      return setToggleShow(!toggleShow);\n    }\n  }, restProps), children, toggleShow ? /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/images/icons/close-slim.png\",\n    alt: \"Close\"\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/images/icons/add.png\",\n    alt: \"Open\"\n  }));\n};\n\nAccordion.Body = function AccordionBody(_ref5) {\n  var children = _ref5.children,\n      restProps = _objectWithoutProperties(_ref5, _excluded5);\n\n  var _useContext2 = useContext(ToggleContext),\n      toggleShow = _useContext2.toggleShow;\n\n  return toggleShow ? /*#__PURE__*/React.createElement(Body, restProps, children) : null;\n  return /*#__PURE__*/React.createElement(Body, _extends({\n    className: toggleShow ? 'open' : 'closed'\n  }, restProps), /*#__PURE__*/React.createElement(\"span\", null, children));\n};","map":{"version":3,"sources":["/Users/Daniel/Dropbox/Documents/Projects/Danflix/react_frontend/src/components/accordion/index.js"],"names":["React","useState","useContext","createContext","Container","Title","Item","Inner","Header","Body","ToggleContext","Accordion","children","restProps","AccordionTitle","AccordionItem","toggleShow","setToggleShow","AccordionHeader","AccordionBody"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgDC,IAAhD,QAA4D,oBAA5D;AAEA,IAAMC,aAAa,gBAAGP,aAAa,EAAnC;AAEA,eAAe,SAASQ,SAAT,OAA+C;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAbC,SAAa;;AAC1D,sBACI,oBAAC,SAAD,EAAgBA,SAAhB,eACI,oBAAC,KAAD,QAASD,QAAT,CADJ,CADJ;AAKH,C,CACD;;AACAD,SAAS,CAACN,KAAV,GAAkB,SAASS,cAAT,QAAoD;AAAA,MAA1BF,QAA0B,SAA1BA,QAA0B;AAAA,MAAbC,SAAa;;AAClE,sBAAO,oBAAC,KAAD,EAAYA,SAAZ,EAAwBD,QAAxB,CAAP;AACH,CAFD;;AAIAD,SAAS,CAACL,IAAV,GAAiB,SAASS,aAAT,QAAmD;AAAA,MAA1BH,QAA0B,SAA1BA,QAA0B;AAAA,MAAbC,SAAa;;AAChE,kBAAoCZ,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOe,UAAP;AAAA,MAAmBC,aAAnB;;AACA,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAED,MAAAA,UAAU,EAAVA,UAAF;AAAcC,MAAAA,aAAa,EAAbA;AAAd;AAA/B,kBACI,oBAAC,IAAD,EAAWJ,SAAX,EAAuBD,QAAvB,CADJ,MADJ;AAKH,CAPD;;AASAD,SAAS,CAACH,MAAV,GAAmB,SAASU,eAAT,QAAqD;AAAA,MAA1BN,QAA0B,SAA1BA,QAA0B;AAAA,MAAbC,SAAa;;AAAE;AACtE,oBAAsCX,UAAU,CAACQ,aAAD,CAAhD;AAAA,MAAQM,UAAR,eAAQA,UAAR;AAAA,MAAoBC,aAApB,eAAoBA,aAApB;;AACA,sBACA,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMA,aAAa,CAAC,CAACD,UAAF,CAAnB;AAAA;AAAjB,KAAwDH,SAAxD,GAEKD,QAFL,EAKKI,UAAU,gBACP;AAAK,IAAA,GAAG,EAAC,8BAAT;AAAwC,IAAA,GAAG,EAAC;AAA5C,IADO,gBAGP;AAAK,IAAA,GAAG,EAAC,uBAAT;AAAiC,IAAA,GAAG,EAAC;AAArC,IARR,CADA;AAaH,CAfD;;AAiBAL,SAAS,CAACF,IAAV,GAAiB,SAASU,aAAT,QAAmD;AAAA,MAA1BP,QAA0B,SAA1BA,QAA0B;AAAA,MAAbC,SAAa;;AAChE,qBAAuBX,UAAU,CAACQ,aAAD,CAAjC;AAAA,MAAQM,UAAR,gBAAQA,UAAR;;AAEA,SAAOA,UAAU,gBAAG,oBAAC,IAAD,EAAWH,SAAX,EAAwBD,QAAxB,CAAH,GAA8C,IAA/D;AACA,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEI,UAAU,GAAG,MAAH,GAAY;AAAvC,KAAqDH,SAArD,gBACE,kCAAOD,QAAP,CADF,CADJ;AAKC,CATL","sourcesContent":["import React, {useState, useContext, createContext } from 'react';\nimport { Container, Title, Item, Inner, Header, Body } from './styles/accordion'\n\nconst ToggleContext = createContext();\n\nexport default function Accordion({ children, ...restProps }) {\n    return (\n        <Container { ...restProps }>\n            <Inner>{ children }</Inner>\n        </Container>\n    );\n}\n// State is for keeping track of changes on the page\nAccordion.Title = function AccordionTitle({ children, ...restProps }) {\n    return <Title { ...restProps}>{children}</Title>;\n};\n\nAccordion.Item = function AccordionItem({ children, ...restProps }) {\n    const [toggleShow, setToggleShow] = useState(false);\n    return (\n        <ToggleContext.Provider value={{ toggleShow, setToggleShow}}> \n            <Item { ...restProps}>{children}</Item>;\n        </ToggleContext.Provider>\n    );\n};\n\nAccordion.Header = function AccordionHeader({ children, ...restProps }) { //Passed into item\n    const { toggleShow, setToggleShow } = useContext(ToggleContext);\n    return (\n    <Header onClick={() => setToggleShow(!toggleShow)} { ...restProps}> \n    {/* Above line was initially different in tutorial */}\n        {children}\n        {/* Below line has a method for printing the state of an item - enable to see true / false on item on page*/}\n        {/* <pre>{JSON.stringify(toggleShow, null, 2)}</pre>  */}\n        {toggleShow ? (\n            <img src=\"/images/icons/close-slim.png\" alt=\"Close\" />\n        ) : (\n            <img src=\"/images/icons/add.png\" alt=\"Open\" />\n        )}\n    </Header>\n    );\n};\n\nAccordion.Body = function AccordionBody({ children, ...restProps }) {\n    const { toggleShow } = useContext(ToggleContext);\n\n    return toggleShow ? <Body { ...restProps }>{children}</Body> : null\n    return (\n        <Body className={toggleShow ? 'open' : 'closed'} {...restProps}>\n          <span>{children}</span>\n        </Body>\n      );\n    };"]},"metadata":{},"sourceType":"module"}